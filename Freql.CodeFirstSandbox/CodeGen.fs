//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 
namespace Freql.CodeFirstSandbox

#nowarn "6142001"

open System
open Freql.Tools.CodeFirst
open Freql.Tools.CodeFirst.Core.Operations
open Freql.CodeFirstSandbox.Models

/// <summary>
/// A collection of extensions on domain models to help with code-first binds.
/// Extensions are added so domain models do not need to be polluted with methods only needed for bindings.
/// </summary>
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
module Extensions =
    type Foo with
        member this.GetPrimaryKey() =
            failwith "todo"
    
    type Bar with
        member this.GetPrimaryKey() =
            failwith "todo"
    
    type Baz with
        member this.GetPrimaryKey() =
            failwith "todo"
    
    type FooBarLink with
        member this.GetPrimaryKey() =
            failwith "todo"
    
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
[<RequireQualifiedAccess>]
module RecordComparisons =
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``compare Foo records`` (a: Foo) (b: Foo) =
        [ if a.Name.Equals(b.Name, StringComparison.OrdinalIgnoreCase) then
              { TableName = "Foo"
                FieldName = "Name"
                NewValue = box b.Name }
              |> RecordTrackingOperation.UpdateField
          if a.Value.Equals(b.Value, StringComparison.OrdinalIgnoreCase) then
              { TableName = "Foo"
                FieldName = "Value"
                NewValue = box b.Value }
              |> RecordTrackingOperation.UpdateField ]
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``compare Bar records`` (_: Bar) (_: Bar) = []
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``compare Baz records`` (a: Baz) (b: Baz) =
        [ if a.Id.Equals(b.Id, StringComparison.OrdinalIgnoreCase) then
              { TableName = "Baz"
                FieldName = "Id"
                NewValue = box b.Id }
              |> RecordTrackingOperation.UpdateField ]
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``compare FooBarLink records`` (_: FooBarLink) (_: FooBarLink) = []
    
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
[<RequireQualifiedAccess>]
module Create =
    open Extensions
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``create Foo Record`` (ctx: obj) (newRecord: Foo) : Result<Foo, string> =
        failwith "TODO - Implement ``create Foo Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``create Bar Record`` (ctx: obj) (newRecord: Bar) : Result<Bar, string> =
        failwith "TODO - Implement ``create Bar Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``create Baz Record`` (ctx: obj) (newRecord: Baz) : Result<Baz, string> =
        failwith "TODO - Implement ``create Baz Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``create FooBarLink Record`` (ctx: obj) (newRecord: FooBarLink) : Result<FooBarLink, string> =
        failwith "TODO - Implement ``create FooBarLink Record`` function"
    
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
[<RequireQualifiedAccess>]
module Read =
    open Extensions
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``read Foo Record`` (ctx: obj) (newRecord: Foo) : Foo option =
        failwith "TODO - Implement ``read Foo Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``read Bar Record`` (ctx: obj) (newRecord: Bar) : Bar option =
        failwith "TODO - Implement ``read Bar Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``read Baz Record`` (ctx: obj) (newRecord: Baz) : Baz option =
        failwith "TODO - Implement ``read Baz Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``read FooBarLink Record`` (ctx: obj) (newRecord: FooBarLink) : FooBarLink option =
        failwith "TODO - Implement ``read FooBarLink Record`` function"
    
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
[<RequireQualifiedAccess>]
module Update =
    open Extensions
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``update Foo Record`` (ctx: obj) (newRecord: Foo) : Result<Foo, string> =
        match Read.``read Foo Record`` ctx newRecord with
        | Some oldRecord ->
            let updates = ()
            failwith ""
        | None -> Create.``create Foo Record`` ctx newRecord
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``update Bar Record`` (ctx: obj) (newRecord: Bar) : Result<Bar, string> =
        match Read.``read Bar Record`` ctx newRecord with
        | Some oldRecord ->
            let updates = ()
            failwith ""
        | None -> Create.``create Bar Record`` ctx newRecord
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``update Baz Record`` (ctx: obj) (newRecord: Baz) : Result<Baz, string> =
        match Read.``read Baz Record`` ctx newRecord with
        | Some oldRecord ->
            let updates = ()
            failwith ""
        | None -> Create.``create Baz Record`` ctx newRecord
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``update FooBarLink Record`` (ctx: obj) (newRecord: FooBarLink) : Result<FooBarLink, string> =
        match Read.``read FooBarLink Record`` ctx newRecord with
        | Some oldRecord ->
            let updates = ()
            failwith ""
        | None -> Create.``create FooBarLink Record`` ctx newRecord
    
/// <remarks>
/// This record was generated via Freql.Tools on 31/10/2024 21:22:07
/// </remarks>
[<CompilerMessage("This module is intended for internal use in generated code. It is not intended to make up a public API. To remove this warning add #nowarn \"6142001\"",
                  6142001)>]
[<RequireQualifiedAccess>]
module Delete =
    open Extensions
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``delete Foo Record`` (ctx: obj) (newRecord: Foo) : Result<unit, string> =
        failwith "TODO - Implement ``delete Foo Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``delete Bar Record`` (ctx: obj) (newRecord: Bar) : Result<unit, string> =
        failwith "TODO - Implement ``delete Bar Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``delete Baz Record`` (ctx: obj) (newRecord: Baz) : Result<unit, string> =
        failwith "TODO - Implement ``delete Baz Record`` function"
    
    /// <remarks>
    /// This record was generated via Freql.Tools on 31/10/2024 21:22:07
    /// </remarks>
    let ``delete FooBarLink Record`` (ctx: obj) (newRecord: FooBarLink) : Result<unit, string> =
        failwith "TODO - Implement ``delete FooBarLink Record`` function"
    